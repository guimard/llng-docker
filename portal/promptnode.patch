--- a/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
@@ -303,7 +303,7 @@ sub run {
     return PE_ERROR;
 }
 
-sub _authorizeEndpoint {
+sub _checkErrorsInAuthorizeEndpoint {
     my ( $self, $req ) = @_;
 
     # Get and save parameters
@@ -569,6 +569,38 @@ sub _authorizeEndpoint {
         );
     }
 
+    # Check scope validity
+    # We use a slightly more relaxed version of
+    # https://tools.ietf.org/html/rfc6749#appendix-A.4
+    # To be tolerant of user error (trailing spaces, etc.)
+    # Scope names are restricted to printable ASCII characters,
+    # excluding double quote and backslash
+    unless ( $oidc_request->{'scope'} =~ /^[\x20\x21\x23-\x5B\x5D-\x7E]*$/ ) {
+        return $self->_failAuthorize( $req,
+            msg => "Submitted scope is not valid" );
+    }
+
+    # Check openid scope
+    unless ( $self->_hasScope( 'openid', $oidc_request->{'scope'} ) ) {
+        return $self->_failAuthorize( $req, msg => "No openid scope found" );
+    }
+    $req->data->{_oidc_request} = $oidc_request;
+    $req->data->{_oidc_rp}      = $rp;
+    $req->data->{_oidc_flow}    = $flow;
+    return ();
+}
+
+sub _authorizeEndpoint {
+    my ( $self, $req ) = @_;
+
+    my $res = $self->_checkErrorsInAuthorizeEndpoint($req);
+    return $res if $res;
+    my $oidc_request  = $req->data->{_oidc_request};
+    my $rp            = $req->data->{_oidc_rp};
+    my $flow          = $req->data->{_oidc_flow};
+    my $client_id     = $oidc_request->{client_id};
+    my $response_type = $oidc_request->{'response_type'};
+
     my $spAuthnLevel = $self->rpLevelRules->{$rp}->( $req, $req->sessionInfo );
     $self->rpOptions->{$rp}->{oidcRPMetaDataOptionsAuthnLevel} || 0;
 
@@ -604,22 +636,6 @@ sub _authorizeEndpoint {
         return $self->reAuth($req);
     }
 
-    # Check scope validity
-    # We use a slightly more relaxed version of
-    # https://tools.ietf.org/html/rfc6749#appendix-A.4
-    # To be tolerant of user error (trailing spaces, etc.)
-    # Scope names are restricted to printable ASCII characters,
-    # excluding double quote and backslash
-    unless ( $oidc_request->{'scope'} =~ /^[\x20\x21\x23-\x5B\x5D-\x7E]*$/ ) {
-        return $self->_failAuthorize( $req,
-            msg => "Submitted scope is not valid" );
-    }
-
-    # Check openid scope
-    unless ( $self->_hasScope( 'openid', $oidc_request->{'scope'} ) ) {
-        return $self->_failAuthorize( $req, msg => "No openid scope found" );
-    }
-
     # Check id_token_hint
     my $id_token_hint = $oidc_request->{'id_token_hint'};
     if ($id_token_hint) {
@@ -2727,6 +2743,12 @@ sub metadata {
 sub exportRequestParameters {
     my ( $self, $req ) = @_;
 
+    if ( my $p = $req->param('prompt') ) {
+        if ( $p eq 'none' ) {
+            return $self->_unauthPromptNone($req);
+        }
+    }
+
     foreach my $param (
         qw/response_type scope client_id state redirect_uri nonce
         response_mode display prompt max_age ui_locales id_token_hint
@@ -2783,6 +2805,23 @@ sub exportRequestParameters {
     return PE_OK;
 }
 
+sub _unauthPromptNone {
+    my ( $self, $req ) = @_;
+    my $res = $self->_checkErrorsInAuthorizeEndpoint($req);
+    return $res if $res;
+
+    my $oidc_request = $req->data->{_oidc_request};
+    my $uri          = $oidc_request->{redirect_uri};
+    $uri =
+        $uri
+      . ( $uri =~ /\?/ ? '&' : '?' )
+      . build_urlencoded(
+        error => 'login_required',
+        ( $oidc_request->{state} ? ( state => $oidc_request->{state} ) : () ),
+      );
+    return $self->_redirectToUrl( $req, $uri );
+}
+
 sub _hasScope {
     my ( $self, $scope, $scopelist ) = @_;
     return scalar grep { $_ eq $scope } ( split /\s+/, $scopelist );
new file mode 100644
--- /dev/null
