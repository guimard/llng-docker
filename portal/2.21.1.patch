--- a/usr/share/perl5/Lemonldap/NG/Portal.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal.pm
@@ -1,7 +1,7 @@
 # Alias for Lemonldap::NG::Portal::Main
 package Lemonldap::NG::Portal;
 
-our $VERSION = '2.21.0';
+our $VERSION = '2.21.1';
 use Lemonldap::NG::Portal::Main;
 use base 'Lemonldap::NG::Portal::Main';
 
--- a/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
@@ -303,7 +303,7 @@ sub run {
     return PE_ERROR;
 }
 
-sub _authorizeEndpoint {
+sub _checkErrorsInAuthorizeEndpoint {
     my ( $self, $req ) = @_;
 
     # Get and save parameters
@@ -569,6 +569,38 @@ sub _authorizeEndpoint {
         );
     }
 
+    # Check scope validity
+    # We use a slightly more relaxed version of
+    # https://tools.ietf.org/html/rfc6749#appendix-A.4
+    # To be tolerant of user error (trailing spaces, etc.)
+    # Scope names are restricted to printable ASCII characters,
+    # excluding double quote and backslash
+    unless ( $oidc_request->{'scope'} =~ /^[\x20\x21\x23-\x5B\x5D-\x7E]*$/ ) {
+        return $self->_failAuthorize( $req,
+            msg => "Submitted scope is not valid" );
+    }
+
+    # Check openid scope
+    unless ( $self->_hasScope( 'openid', $oidc_request->{'scope'} ) ) {
+        return $self->_failAuthorize( $req, msg => "No openid scope found" );
+    }
+    $req->data->{_oidc_request} = $oidc_request;
+    $req->data->{_oidc_rp}      = $rp;
+    $req->data->{_oidc_flow}    = $flow;
+    return ();
+}
+
+sub _authorizeEndpoint {
+    my ( $self, $req ) = @_;
+
+    my $res = $self->_checkErrorsInAuthorizeEndpoint($req);
+    return $res if $res;
+    my $oidc_request  = $req->data->{_oidc_request};
+    my $rp            = $req->data->{_oidc_rp};
+    my $flow          = $req->data->{_oidc_flow};
+    my $client_id     = $oidc_request->{client_id};
+    my $response_type = $oidc_request->{'response_type'};
+
     my $spAuthnLevel = $self->rpLevelRules->{$rp}->( $req, $req->sessionInfo );
     $self->rpOptions->{$rp}->{oidcRPMetaDataOptionsAuthnLevel} || 0;
 
@@ -604,22 +636,6 @@ sub _authorizeEndpoint {
         return $self->reAuth($req);
     }
 
-    # Check scope validity
-    # We use a slightly more relaxed version of
-    # https://tools.ietf.org/html/rfc6749#appendix-A.4
-    # To be tolerant of user error (trailing spaces, etc.)
-    # Scope names are restricted to printable ASCII characters,
-    # excluding double quote and backslash
-    unless ( $oidc_request->{'scope'} =~ /^[\x20\x21\x23-\x5B\x5D-\x7E]*$/ ) {
-        return $self->_failAuthorize( $req,
-            msg => "Submitted scope is not valid" );
-    }
-
-    # Check openid scope
-    unless ( $self->_hasScope( 'openid', $oidc_request->{'scope'} ) ) {
-        return $self->_failAuthorize( $req, msg => "No openid scope found" );
-    }
-
     # Check id_token_hint
     my $id_token_hint = $oidc_request->{'id_token_hint'};
     if ($id_token_hint) {
@@ -2727,6 +2743,12 @@ sub metadata {
 sub exportRequestParameters {
     my ( $self, $req ) = @_;
 
+    if ( my $p = $req->param('prompt') ) {
+        if ( $p eq 'none' ) {
+            return $self->_unauthPromptNone($req);
+        }
+    }
+
     foreach my $param (
         qw/response_type scope client_id state redirect_uri nonce
         response_mode display prompt max_age ui_locales id_token_hint
@@ -2783,6 +2805,23 @@ sub exportRequestParameters {
     return PE_OK;
 }
 
+sub _unauthPromptNone {
+    my ( $self, $req ) = @_;
+    my $res = $self->_checkErrorsInAuthorizeEndpoint($req);
+    return $res if $res;
+
+    my $oidc_request = $req->data->{_oidc_request};
+    my $uri          = $oidc_request->{redirect_uri};
+    $uri =
+        $uri
+      . ( $uri =~ /\?/ ? '&' : '?' )
+      . build_urlencoded(
+        error => 'login_required',
+        ( $oidc_request->{state} ? ( state => $oidc_request->{state} ) : () ),
+      );
+    return $self->_redirectToUrl( $req, $uri );
+}
+
 sub _hasScope {
     my ( $self, $scope, $scopelist ) = @_;
     return scalar grep { $_ eq $scope } ( split /\s+/, $scopelist );
--- a/usr/share/perl5/Lemonldap/NG/Portal/Lib/Code2F.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Lib/Code2F.pm
@@ -117,8 +117,7 @@ sub _resend {
             type         => $self->prefix,
         );
 
-        eval { $self->setSecurity($req) };
-        $req->mustRedirect(1);
+        $req->noLoginDisplay(1);
         return $self->p->do( $req, [ sub { PE_NOTOKEN } ] );
     }
 
@@ -135,7 +134,7 @@ sub _resend {
             portal_error => portalConsts->{PE_TOKENEXPIRED},
             type         => $self->prefix,
         );
-        $self->setSecurity($req);
+        $req->noLoginDisplay(1);
         return $self->p->do( $req, [ sub { PE_TOKENEXPIRED } ] );
     }
 
--- a/usr/share/perl5/Lemonldap/NG/Portal/Lib/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Lib/OpenIDConnect.pm
@@ -28,7 +28,7 @@ use URI;
 use Lemonldap::NG::Portal::Main::Constants
   qw(PE_OK PE_REDIRECT PE_ERROR portalConsts);
 
-our $VERSION = '2.21.0';
+our $VERSION = '2.21.1';
 
 use constant oidcErrorLevel => {
     server_error     => 'error',
@@ -453,11 +453,16 @@ sub buildAuthorizationCodeAuthnRequest {
     };
     my $authorize_request_params = {
         %$authorize_request_oauth2_params,
-        ( defined $display    ? ( display    => $display )    : () ),
-        ( defined $prompt     ? ( prompt     => $prompt )     : () ),
-        ( $max_age            ? ( max_age    => $max_age )    : () ),
-        ( defined $ui_locales ? ( ui_locales => $ui_locales ) : () ),
-        ( defined $acr_values ? ( acr_values => $acr_values ) : () )
+        ( $display    ? ( display    => $display )    : () ),
+        ( $prompt     ? ( prompt     => $prompt )     : () ),
+        ( $ui_locales ? ( ui_locales => $ui_locales ) : () ),
+        (
+            defined($max_age) && length($max_age) ? ( max_age => $max_age ) : ()
+        ),
+        (
+            defined($acr_values)
+              && length($acr_values) ? ( acr_values => $acr_values ) : ()
+        )
     };
 
     # Call oidcGenerateAuthenticationRequest
--- a/usr/share/perl5/Lemonldap/NG/Portal/Main/Process.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Main/Process.pm
@@ -468,10 +468,7 @@ sub authenticate {
     my ( $self, $req ) = @_;
     my $ret = $req->authResult( $self->_authentication->authenticate($req) );
     $self->logger->debug( " -> authResult = " . $req->authResult );
-    if ( $ret == PE_OK ) {
-        $req->{sessionInfo}->{_lastAuthnUTime} = time();
-        return $ret;
-    }
+    return $ret if $ret == PE_OK;
 
     # Store failed login into history
     $req->steps( [
@@ -492,6 +489,7 @@ sub authenticate {
 
 sub setAuthSessionInfo {
     my ( $self, $req ) = @_;
+    $req->{sessionInfo}->{_lastAuthnUTime} = time();
     my $ret = $self->_authentication->setAuthSessionInfo($req);
     if ( $ret == PE_OK
         and not( defined $req->sessionInfo->{authenticationLevel} ) )
