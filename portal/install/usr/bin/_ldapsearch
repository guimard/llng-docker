#!/usr/bin/perl

use strict;
use warnings;
use Net::LDAP;
use Getopt::Long;
use Pod::Usage;

# Options
my $host = 'localhost';
my $port = 389;
my $binddn;
my $password;
my $base;
my $scope = 'sub';    # sub, one, or base
my $filter;           # Default '(objectClass=*)';
my @attrs;
my $url;
my $help = 0;
my $x;
my $llng;

GetOptions(
    'x'            => \$x,
    'h|host=s'     => \$host,
    'H|url=s'      => \$url,
    'p|port=i'     => \$port,
    'D|binddn=s'   => \$binddn,
    'w|password=s' => \$password,
    'b|base=s'     => \$base,
    's|scope=s'    => \$scope,
    'f|filter=s'   => \$filter,
    'a|attrs=s'    => \@attrs,
    'help|?'       => \$help,
    'llng'         => \$llng,
) or pod2usage(2);

pod2usage(1) if $help;

$filter ||= shift if @ARGV;
$filter = '(objectClass=*)' unless $filter;

@attrs = @ARGV if ( @ARGV and !@attrs );

if ( $scope and $scope !~ /^(?:base|one|sub|children)$/ ) {
    die "Bad scope $scope";
}

my $ldap;

if ( $0 =~ m#^(?:.*/)?lldapsearch# or $llng ) {
    eval q[
package Fake::Portal;
use Lemonldap::NG::Common::Logger::Std;
use Mouse;
has logger => (
    is      => 'ro',
    default => sub {
        return Lemonldap::NG::Common::Logger::Std->new(
            { logLevel => 'error' } );
    },
);
has userLogger => (
    is      => 'ro',
    lazy    => 1,
    default => sub {
        $_[0]->logger;
    },
);
package main;
use Lemonldap::NG::Common::Conf;
use Lemonldap::NG::Portal::Lib::Net::LDAP;

];
    my $confAcc = Lemonldap::NG::Common::Conf->new( {} ) or die;
    my $conf    = $confAcc->getConf( { cfgNum => $confAcc->lastCfg } );
    $conf->{logLevel} = 'warn';

    $base ||= $conf->{ldapBase};
    $ldap = Lemonldap::NG::Portal::Lib::Net::LDAP->new(
        {
            p    => Fake::Portal->new($conf),
            conf => $conf,
        }
    ) or die $@;
    my $mesg =
      $ldap->bind( $conf->{managerDn}, password => $conf->{managerPassword} );

    $mesg->code and die $mesg->error;
    print STDERR "# Using Lemonldap configuration\n"
      . "# Base: $base\n"
      . "# filter: $filter\n";
}
else {
    $ldap = Net::LDAP->new( $url ? ($url) : ( $host, port => $port ) )
      or die "Erreur de connexion à "
      . ( $url ? $url : "$host:$port" ) . " : $@";

    # Authentification
    if ( $binddn && $password ) {
        my $mesg = $ldap->bind( $binddn, password => $password );
        die "Erreur d'authentification: ", $mesg->error if $mesg->code;
    }

}

my $mesg = $ldap->search(
    base   => $base,
    scope  => $scope,
    filter => $filter,
    ( @attrs ? ( attrs => \@attrs ) : () ),
);

# Vérification des erreurs de recherche
die "Search error: ", $mesg->error if $mesg->code;

# Affichage des résultats
foreach my $entry ( $mesg->entries ) {
    $entry->dump;    # Affiche toutes les informations de l'entrée
}

# Fermeture de la connexion LDAP
$ldap->unbind;

__END__

=head1 NAME

ldapsearch - Openldap ldapsearch like but optimized for L<LemonLDAP::NG|https://lemonldap-ng.org>

=head1 SYNOPSIS

  $ lldapsearch '(LDAP filter)' <attributes>
  $ ldapsearch -H ldaps://localhost -D <account> -w <pasword> -b <LDAP base> '(LDAP filter)' <attributes>

=head1 DESCRIPTION

This program mimics OpenLDAP's ldapsearch but does not require its dependencies
and can use Lemonldap::NG's configuration to find LDAP settings.

=head1 Options

=over

=item B<--help>

Display this

=item use B<lldapsearch> or B<--llng>

Use LemonLDAP::NG configuration to get default values of options.

=item B<--host>

LDAP URI or hostname. Default: localhost.

=item B<--port>

Override default port with this value.

=item B<--binddn>, B<-D>

Use the given Distinguished Name to bind to the LDAP directory.

=item B<--password>, B<-w>

Use the given value as the password for simple authentication.

=item B<--base>, B<-b>

Use the given value as the starting point for the search instead of the default I<(LDAP base)>.

=item B<--scope>, B<-s> I<{base|one|sub|children}>

Specify the scope of the search to be one of base, one, sub, or children to
specify a base object, one-level, subtree, or children search. The default
is sub.

=item B<--filter>, B<-f> or B<first non-option argument>

Filter for the search

=item B<--args> or B<all arguments given after first non-option argument>

List of attributes to get. Default: all.

=back

=head1 AUTHORS

=over

=item LemonLDAP::NG team L<http://lemonldap-ng.org/team>

=back

=head1 BUG REPORT

Use OW2 system to report bug or ask for features:
L<https://gitlab.ow2.org/lemonldap-ng/lemonldap-ng/issues>

=head1 DOWNLOAD

Lemonldap::NG is available at
L<https://lemonldap-ng.org/download>

=head1 COPYRIGHT AND LICENSE

See COPYING file for details.

This library is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut
