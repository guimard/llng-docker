--- a/usr/share/perl5/Lemonldap/NG/Manager/Sessions.pm
+++ b/usr/share/perl5/Lemonldap/NG/Manager/Sessions.pm
@@ -4,7 +4,7 @@ use strict;
 use utf8;
 use Mouse;
 
-use Lemonldap::NG::Common::Session;
+use Lemonldap::NG::Common::Session 'id2storage';
 use Lemonldap::NG::Common::PSGI::Constants;
 use Lemonldap::NG::Common::Conf::Constants;
 use Lemonldap::NG::Common::Conf::ReConstants;
@@ -28,6 +28,8 @@ use constant icon         => 'duplicate';
 sub init {
     my ( $self, $conf ) = @_;
 
+    $self->ua( Lemonldap::NG::Common::UserAgent->new($conf) );
+
     # HTML template
     $self->addRoute( 'sessions.html', undef, ['GET'] )
 
@@ -59,9 +61,12 @@ sub init {
     $self->setTypes($conf);
 
     $self->{ipField}              ||= 'ipAddr';
+    $self->{portal}               ||= $conf->{portal};
+    $self->{cookieName}           ||= $conf->{cookieName};
     $self->{multiValuesSeparator} ||= '; ';
     $self->{impersonationPrefix} = $conf->{impersonationPrefix} || 'real_';
     $self->{hiddenAttributes} //= '_password';
+    $self->{hashedSessionStore} = $conf->{hashedSessionStore};
     $self->{hiddenAttributes} .= ' _session_id'
       unless $conf->{displaySessionId};
     return 1;
@@ -71,6 +76,55 @@ sub init {
 # User logout
 #
 
+# Private method to delete a session
+sub _sessionDelete {
+    my ( $self, $storageModule, $opts, $sid, $callback ) = @_;
+    my $session = Lemonldap::NG::Common::Session->new(
+        hashStore            => 0,
+        storageModule        => $storageModule,
+        storageModuleOptions => $opts,
+        cacheModule => Lemonldap::NG::Handler::Main->tsv->{sessionCacheModule},
+        cacheModuleOptions =>
+          Lemonldap::NG::Handler::Main->tsv->{sessionCacheOptions},
+        id => $sid,
+    );
+    if ( $session->data ) {
+        my $c = $callback->($session) if $callback;
+        $session->remove;
+        return ++$c;
+    }
+    return 0;
+}
+
+sub _searchAtOnHashedStorage {
+    my ( $self, $storageModule, $opts, $field, $val ) = @_;
+    return Lemonldap::NG::Common::Apache::Session->searchOn( $opts, $field,
+        $val )
+      unless $self->{hashedSessionStore};
+    my $sessions =
+      Lemonldap::NG::Common::Apache::Session->searchOn( $opts, '_type',
+        'access_token' );
+    return unless $sessions and %$sessions;
+    foreach ( keys %$sessions ) {
+        my $session = Lemonldap::NG::Common::Session->new(
+            hashStore            => 0,
+            storageModule        => $storageModule,
+            storageModuleOptions => $opts,
+            cacheModule          =>
+              Lemonldap::NG::Handler::Main->tsv->{sessionCacheModule},
+            cacheModuleOptions =>
+              Lemonldap::NG::Handler::Main->tsv->{sessionCacheOptions},
+            id => $_,
+        );
+        delete $sessions->{$_}
+          unless $session->data
+          and $session->data->{$field}
+          and id2storage( $session->data->{$field} ) eq $val;
+    }
+    return $sessions;
+}
+
+# This method disconnects a user from all sessions, including access_token
 sub userLogout {
     my ( $self, $req ) = @_;
 
@@ -84,33 +138,115 @@ sub userLogout {
     my $uid    = $session->data->{$uidKey};
 
     my $count = 0;
+
+    # Get sessions backends
+    my ( %storageModule, %storageModuleOpts );
     foreach my $storage (qw(oidcStorage sessionStorage)) {
-        my $storageModule =
+        $storageModule{$storage} =
           Lemonldap::NG::Handler::Main->tsv->{"${storage}Module"};
-        if ( defined $storageModule ) {
-            next if ( $storageModule eq "Apache::Session::Memcached" );
-            my $opts = Lemonldap::NG::Handler::Main->tsv->{"${storage}Options"};
-            $opts->{backend} = $storageModule;
+        delete $storageModule{$storage}
+          if $storageModule{$storage} eq 'Apache::Session::Memcached';
+        if ( defined $storageModule{$storage} ) {
+            $storageModuleOpts{$storage} =
+              Lemonldap::NG::Handler::Main->tsv->{"${storage}Options"};
+            $storageModuleOpts{$storage}->{backend} = $storageModule{$storage};
+        }
+    }
+
+    # Find sessions to delete
+    foreach my $storage (qw(oidcStorage sessionStorage)) {
+
+        # oidcStorage maybe undefined, thus sessionStorage is used
+        if ( defined $storageModule{$storage} ) {
+
+            # Find primary sessions
             my $sessions =
-              Lemonldap::NG::Common::Apache::Session->searchOn( $opts, $uidKey,
-                $uid );
-            my @keys;
+              Lemonldap::NG::Common::Apache::Session->searchOn(
+                $storageModuleOpts{$storage},
+                $uidKey, $uid );
             if ( $sessions and %$sessions ) {
-                @keys = keys %$sessions;
-                foreach my $sid (@keys) {
-                    my $session = Lemonldap::NG::Common::Session->new(
-                        storageModule        => $storageModule,
-                        storageModuleOptions => $opts,
-                        cacheModule => Lemonldap::NG::Handler::Main->tsv
-                          ->{sessionCacheModule},
-                        cacheModuleOptions => Lemonldap::NG::Handler::Main->tsv
-                          ->{sessionCacheOptions},
-                        id => $sid,
-                    );
-                    if ( $session->data ) {
-                        $session->remove;
-                        $count++;
+                foreach my $sid ( keys %$sessions ) {
+
+                    my $kind = $sessions->{$sid}->{_session_kind};
+                    my $lreq =
+                      HTTP::Request->new( GET => "$self->{portal}?logout=1" );
+                    my $pl;
+                    if ( $kind eq 'SSO' ) {
+                        $lreq->header( Cookie => "$self->{cookieName}=$sid" );
+                        $pl = 1;
                     }
+                    elsif ( $kind eq 'OIDCI'
+                        and $sessions->{$sid}->{_type} eq 'refresh_token' )
+                    {
+                        $lreq->header( Authorization => "Bearer $sid" );
+                        $pl = 1;
+                    }
+                    if ($pl) {
+                        my $resp = $self->ua->request($lreq);
+                        if ( $resp->is_success ) {
+                            $self->logger->info(
+                                "Session $sid deleted by portal");
+                        }
+                        else {
+                            $self->logger->error(
+                                "Error when calling portal to logout: "
+                                  . $resp->status_line );
+                        }
+                    }
+
+                    # Build the sub-session parser
+                    my $callback = sub {
+                        my ($session) = (@_);
+                        my $c = 0;
+
+                        # Case 1, search offline access_token
+                        # Thus parse access_tokens to find links
+                        # to this refresh_token
+                        if ( $storage eq 'oidcStorage'
+                            or not defined $storageModule{oidcStorage} )
+                        {
+                            my $sessions = $self->_searchAtOnHashedStorage(
+                                $storageModule{$storage},
+                                $storageModuleOpts{$storage},
+                                'offline_session_id', $session->id
+                            );
+                            if ( $sessions and %$sessions ) {
+                                $c +=
+                                  $self->_sessionDelete(
+                                    $storageModule{$storage},
+                                    $storageModuleOpts{$storage}, $_ )
+                                  foreach ( keys %$sessions );
+                            }
+                        }
+
+                        # Case 2, search online access_token
+                        # Thus parse access_token to find links to this session
+                        if ( $storage eq 'sessionStorage' ) {
+                            my ( $m, $opts ) =
+                              defined( $storageModule{oidcStorage} )
+                              ? (
+                                $storageModule{oidcStorage},
+                                $storageModuleOpts{oidcStorage}
+                              )
+                              : (
+                                $storageModule{$storage},
+                                $storageModuleOpts{$storage}
+                              );
+                            my $sessions =
+                              $self->_searchAtOnHashedStorage( $m,
+                                $opts, 'user_session_id', $session->id );
+                            if ( $sessions and %$sessions ) {
+                                $c += $self->_sessionDelete( $m, $opts, $_ )
+                                  foreach ( keys %$sessions );
+                            }
+                        }
+                        return $c;
+                    };
+                    $count += $self->_sessionDelete(
+                        $storageModule{$storage},
+                        $storageModuleOpts{$storage},
+                        $sid, $callback
+                    );
                 }
             }
         }
