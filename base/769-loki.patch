--- a/usr/share/perl5/Lemonldap/NG/Common/Logger/Loki.pm
+++ b/usr/share/perl5/Lemonldap/NG/Common/Logger/Loki.pm
@@ -12,21 +12,34 @@ sub new {
     my ( $class, $conf, %args ) = @_;
     my $self  = bless {}, $class;
     my $level = $conf->{logLevel} || 'info';
+    $self->{deferDir} = $conf->{lokiDeferDir};
     $self->{url} = $conf->{lokiUrl} || 'http://localhost:3100/loki/api/v1/push';
-    $self->{label}         = $conf->{lokiLabel} || 'llng';
-    $self->{ua}            = Lemonldap::NG::Common::UserAgent->new($conf);
-    $self->{j}             = JSON->new->canonical;
+    $self->{label} = $conf->{lokiLabel} || 'llng';
+    $self->{j}     = JSON->new->canonical;
+    $self->{ua}    = Lemonldap::NG::Common::UserAgent->new($conf)
+      unless $self->{deferDir};
     $self->{instance}      = $conf->{lokiInstance} || hostname;
     $self->{env}           = $conf->{lokiEnv}      || 'prod';
     $self->{tenant}        = $conf->{lokiTenant};
     $self->{authorization} = $conf->{lokiAuthorization};
     $self->{tenantHeader}  = $conf->{lokiTenantHeader} || 'X-Scope-OrgID';
+    $self->{proxy}         = $conf->{lokiProxy};
     $self->{service} =
       $args{user}
       ? ( $conf->{lokiUserService} || 'auth' )
       : ( $conf->{lokiService} || 'llng' );
     my $show = 1;
 
+    unless ( $self->{deferDir} ) {
+        foreach (qw(url proxy)) {
+            if ( $self->{$_} ) {
+                my $h = eval { URI->new( $self->{$_} )->host };
+                die 'Bad loki' . ucfirst($_) . ' value' if $@ or !$h;
+                $self->{host} = $h                      if $_ eq 'url';
+            }
+        }
+    }
+
     foreach (qw(error warn notice info debug)) {
         if ($show) {
             my $name = $_;
@@ -59,8 +72,9 @@ sub log {
         ],
     };
     my $req = HTTP::Request->new(
-        POST => $self->{url},
+        POST => ( $self->{proxy} || $self->{url} ),
         [
+            ( $self->{proxy} ? ( Host => $self->{host} ) : () ),
             'Content-Type' => 'application/json',
             (
                 $self->{authorization}
@@ -74,10 +88,24 @@ sub log {
         ],
         $self->{j}->encode($logEntry)
     );
-    my $response = $self->{ua}->request($req);
-    unless ( $response->is_success ) {
-        print STDERR "Unable to push log to loki\nMessage: $message\nResponse: "
-          . $response->status_line . "\n";
+    if ( $self->{deferDir} ) {
+        $req = $req->as_string;
+        if ( open my $f, '>', "$self->{deferDir}/" . time . ".$$" ) {
+            print $f $req;
+            close $f;
+        }
+        else {
+            print STDERR
+              "# UNABLE TO STORE LOKI LOG: $!, here is the content:\n$req";
+        }
+    }
+    else {
+        my $response = $self->{ua}->request($req);
+        unless ( $response->is_success ) {
+            print STDERR
+              "Unable to push log to loki\nMessage: $message\nResponse: "
+              . $response->status_line . "\n";
+        }
     }
 }
 
--- a/usr/share/perl5/Lemonldap/NG/Common/Logger/Syslog.pm
+++ b/usr/share/perl5/Lemonldap/NG/Common/Logger/Syslog.pm
@@ -1,7 +1,7 @@
 package Lemonldap::NG::Common::Logger::Syslog;
 
 use strict;
-use Sys::Syslog qw(:standard);
+use Sys::Syslog qw(:standard :extended);
 
 our $VERSION = '2.18.0';
 
@@ -18,9 +18,15 @@ sub new {
         $self->{facility} = $conf->{syslogFacility} || 'daemon';
         $self->{options}  = $conf->{syslogOptions}  || 'cons,pid,ndelay';
     }
-    # Avoid to launch openlog multiple times, to prevent mech degradation from native to unix
-    # See also https://gitlab.ow2.org/lemonldap-ng/lemonldap-ng/-/issues/2771
+
+    # Avoid to launch openlog multiple times, to prevent mech degradation
+    # from native to unix. See also
+    # https://gitlab.ow2.org/lemonldap-ng/lemonldap-ng/-/issues/2771
     unless ($done) {
+        if ( $conf->{syslogSockOptions} ) {
+            $conf->{syslogSockOptions}->{type} ||= 'udp';
+            setlogsock( $conf->{syslogSockOptions} );
+        }
         eval {
             openlog( 'LLNG', $self->{options}, $self->{facility} );
             $done = 1;
