#!/usr/bin/perl

use strict;
use Lemonldap::NG::Common::Conf;
use JSON;

my $confAcc = Lemonldap::NG::Common::Conf->new( {} );
my $cfgNum  = $confAcc->lastCfg();
my $conf    = $confAcc->getConf( { cfgNum => $cfgNum, noCache => 1 } );
delete $conf->{cipher};

my $command = shift @ARGV or die "Missing command";

if ( $command eq 'get' ) {
    my ( $c, $key, $offset ) = follow( $conf, @ARGV );
    if ( ref $c->{$key} ) {
        print JSON::to_json( $c->{$key} );
    }
    else {
        print $c->{$key} . "\n";
    }
}
elsif ( $command eq 'set' ) {
    my $val = pop @ARGV;
    die "Missing key and value" unless @ARGV;
    my ( $c, $key, $offset ) = follow( $conf, @ARGV );
    if ( $c->{$key} ne $val ) {
        my $realVal = $val;
        if ( $val =~ /^[\{\[].*[\]\}]$/ ) {
            $realVal = eval { JSON::from_json($val) };
            die "Bad value for $ARGV[1]: $@" if $@;
        }
        $c->{$key} = $realVal;
        my $res = $confAcc->saveConf( $conf, force => 1, cfgNumFixed => 1 );
        print STDERR "Key $offset$key updated from "
          . $c->{$key}
          . " to $val\n";
    }
}
elsif ( $command eq 'setDomain' ) {
    my $currentDomain = $conf->{domain};
    print STDERR "Current domain: $currentDomain\n";
    my $newDomain = $ARGV[0] or die "Missing domain";
    if ( $newDomain and ( $newDomain ne $currentDomain ) ) {
        print STDERR "New domain: $newDomain\n";
        delete $conf->{cipher};
        my $content = JSON::to_json($conf);
        $content =~ s/\.\Q$currentDomain\E/\.$newDomain/g;
        $conf = JSON::from_json($content);
        $conf->{domain} = $newDomain;
        my $res = $confAcc->saveConf( $conf, force => 1, cfgNumFixed => 1 );
    }
}
else {
    die "Unknown command: '$command'";
}

sub follow {
    my ( $conf, @keys ) = @_;
    my $offset = '';
    while ( @keys > 1 ) {
        my $key = shift @keys;
        unless (exists $conf->{$key}) {
            warn "Unable to find $offset$key, creating";
            $conf->{$key} = {};
        }
        $offset .= "$key/";
        $conf = $conf->{$key};
    }
    return ( $conf, $keys[0], $offset );
}

sub set {
    my ( $conf, $key, $val, $offset ) = @_;
    if ( $val =~ /^[\{\[].*[\]\}]$/ ) {
        $ARGV[2] = eval { JSON::from_json( $ARGV[2] ) };
        die "Bad value for $ARGV[1]: $@" if $@;
    }
}
