--- a/usr/share/perl5/Lemonldap/NG/Portal/2F/Engines/Default.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/2F/Engines/Default.pm
@@ -561,6 +561,7 @@ sub _choice {
             user         => $req->sessionInfo->{ $self->conf->{whatToTrace} },
             reason       => "Token validation failed",
             portal_error => portalConsts->{$tokres},
+            logLevel     => 'warn',
         );
         return $self->p->do( $req, [ sub { $tokres } ] );
     }
--- a/usr/share/perl5/Lemonldap/NG/Portal/2F/Register/Base.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/2F/Register/Base.pm
@@ -154,6 +154,7 @@ sub failHtmlResponse {
         type         => $self->prefix,
         portal_error => $error,
         user         => $uid,
+        logLevel     => 'notice',
     );
 
     return $self->p->sendHtml(
@@ -178,6 +179,7 @@ sub failResponse {
         type         => $self->prefix,
         portal_error => $error,
         user         => $uid,
+        logLevel     => 'notice',
     );
 
     return $self->p->sendError( $req, $error, $code );
--- a/usr/share/perl5/Lemonldap/NG/Portal/Issuer/CAS.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Issuer/CAS.pm
@@ -1195,6 +1195,7 @@ sub _failValidate1 {
         ( $reason ? ( reason => $reason ) : () ),
         ( $app    ? ( app    => $app )    : () ),
         portal_error => portalConsts->{$res},
+        logLevel     => 'warn',
     );
 
     return $self->returnCasValidateError();
@@ -1215,6 +1216,7 @@ sub _failValidate2 {
         ( $app    ? ( app    => $app )    : () ),
         cas_code     => $code,
         portal_error => portalConsts->{$res},
+        logLevel     => 'warn',
     );
 
     return $self->returnCasServiceValidateError( $req, $code, $reason );
@@ -1233,6 +1235,7 @@ sub _failLogin {
         ( $reason ? ( reason => $reason ) : () ),
         ( $app    ? ( app    => $app )    : () ),
         portal_error => portalConsts->{$res},
+        logLevel     => 'warn',
     );
 
     return $res;
@@ -1249,6 +1252,7 @@ sub _failLoginRule {
         ( $app ? ( app => $app ) : () ),
         message => ("User $user is not authorized to access to $app"),
         reason  => "User is not authorized by access rule",
+        logLevel     => 'warn',
     );
 
     if ( $casAccessControlPolicy =~ /^(error)$/i ) {
--- a/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Issuer/OpenIDConnect.pm
@@ -1203,6 +1203,7 @@ sub _failAuthorize {
         message => ( "OIDC login failed" . $reason ),
         ( $reason ? ( reason => $reason ) : () ),
         portal_error => portalConsts->{$res},
+        logLevel     => 'warn',
     );
 
     return $res;
--- a/usr/share/perl5/Lemonldap/NG/Portal/Issuer/SAML.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Issuer/SAML.pm
@@ -1332,6 +1332,7 @@ sub _failAuthnRequest {
         ( $params{'msg'} ? ( reason => $params{'msg'} ) : () ),
         portal_error => portalConsts->{$res},
         user         => $user,
+        logLevel     => 'warn',
         %logInfo,
     );
 
--- a/usr/share/perl5/Lemonldap/NG/Portal/Lib/2fDevices.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Lib/2fDevices.pm
@@ -111,9 +111,10 @@ sub add2fDevice {
         message => (
             "User " . $uid . " registered 2F device: " . display2F($device)
         ),
-        code   => "2FA_DEVICE_REGISTERED",
-        user   => $uid,
-        device => display2F($device),
+        code     => "2FA_DEVICE_REGISTERED",
+        user     => $uid,
+        device   => display2F($device),
+        logLevel => 'notice',
     );
     $self->p->updatePersistentSession( $req,
         { _2fDevices => to_json($_2fDevices) } );
@@ -171,9 +172,10 @@ sub del2fDevices {
                 message => (
                     "User $uid deleted 2F device: " . display2F($device_spec)
                 ),
-                code   => "2FA_DEVICE_DELETED",
-                user   => $uid,
-                device => display2F($device_spec),
+                code     => "2FA_DEVICE_DELETED",
+                user     => $uid,
+                device   => display2F($device_spec),
+                logLevel => 'notice',
             );
         }
     }
--- a/usr/share/perl5/Lemonldap/NG/Portal/Lib/Code2F.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Lib/Code2F.pm
@@ -115,6 +115,7 @@ sub _resend {
             reason       => "Missing token",
             portal_error => portalConsts->{PE_NOTOKEN},
             type         => $self->prefix,
+            logLevel     => 'warn',
         );
 
         eval { $self->setSecurity($req) };
@@ -134,6 +135,7 @@ sub _resend {
             reason       => "Token expired",
             portal_error => portalConsts->{PE_TOKENEXPIRED},
             type         => $self->prefix,
+            logLevel     => 'warn',
         );
         $self->setSecurity($req);
         return $self->p->do( $req, [ sub { PE_TOKENEXPIRED } ] );
--- a/usr/share/perl5/Lemonldap/NG/Portal/Lib/OpenIDConnect.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Lib/OpenIDConnect.pm
@@ -30,6 +30,12 @@ use Lemonldap::NG::Portal::Main::Constants
 
 our $VERSION = '2.21.0';
 
+use constant oidcErrorLevel => {
+    server_error     => 'error',
+    invalid_request  => 'warn',
+    consent_required => 'notice',
+};
+
 # PROPERTIES
 
 has opAttributes => ( is => 'rw', default => sub { {} } );
@@ -1741,6 +1748,7 @@ sub returnRedirectError {
         ( $error_description ? ( reason => $error_description ) : () ),
         oauth_error  => $error,
         portal_error => portalConsts->{PE_REDIRECT},
+        logLevel     => ( oidcErrorLevel->{$error} || 'notice' ),
     );
 
     my $urldc =
--- a/usr/share/perl5/Lemonldap/NG/Portal/Main/Process.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Main/Process.pm
@@ -173,9 +173,10 @@ sub controlUrl {
         if ( $tmp and ( $tmp !~ URIRE ) ) {
             $self->auditLog(
                 $req,
-                message => "Bad URL $tmp",
-                code    => "UNAUTHORIZED_REDIRECT",
-                url     => $tmp,
+                message  => "Bad URL $tmp",
+                code     => "UNAUTHORIZED_REDIRECT",
+                url      => $tmp,
+                logLevel => 'warn',
             );
             delete $req->{urldc};
             return PE_BADURL;
@@ -215,8 +216,9 @@ sub controlUrl {
                         "URL contains an unprotected host (param: urldc"
                       . " | value: $tmp | alias: $vhost)"
                 ),
-                code => "UNAUTHORIZED_REDIRECT",
-                url  => $tmp,
+                code     => "UNAUTHORIZED_REDIRECT",
+                url      => $tmp,
+                logLevel => 'warn',
             );
             delete $req->{urldc};
             return PE_UNPROTECTEDURL;
--- a/usr/share/perl5/Lemonldap/NG/Portal/Main/Run.pm
+++ b/usr/share/perl5/Lemonldap/NG/Portal/Main/Run.pm
@@ -501,9 +501,10 @@ sub autoRedirect {
         if ( $req->{urldc} =~ /^\s*((?:java|vb)script|data):/ ) {
             $self->auditLog(
                 $req,
-                message => "Redirection to $req->{urldc} blocked",
-                code    => "UNAUTHORIZED_REDIRECT",
-                url     => $req->{urldc},
+                message  => "Redirection to $req->{urldc} blocked",
+                code     => "UNAUTHORIZED_REDIRECT",
+                url      => $req->{urldc},
+                logLevel => 'warn',
             );
             delete $req->{urldc};
         }
@@ -802,8 +803,9 @@ sub _deleteSession {
             message => (
 "User $user has been disconnected from $mod ($req->{sessionInfo}->{ipAddr})"
             ),
-            code => "LOGOUT",
-            auth => $mod,
+            code     => "LOGOUT",
+            auth     => $mod,
+            logLevel => 'notice',
         );
     }
 
@@ -837,9 +839,10 @@ sub autoPost {
     if ( $req->{urldc} =~ /^\s*((?:java|vb)script|data):/ ) {
         $self->auditLog(
             $req,
-            message => "Redirection to $req->{urldc} blocked",
-            code    => "UNAUTHORIZED_REDIRECT",
-            url     => $req->{urldc},
+            message  => "Redirection to $req->{urldc} blocked",
+            code     => "UNAUTHORIZED_REDIRECT",
+            url      => $req->{urldc},
+            logLevel => 'warn',
         );
         return PE_BADURL;
     }
