--- a/usr/share/perl5/Lemonldap/NG/Common/AuditLogger/UserLoggerCompat.pm
+++ b/usr/share/perl5/Lemonldap/NG/Common/AuditLogger/UserLoggerCompat.pm
@@ -22,7 +22,13 @@ sub log {
         my ( $module, $file, $line ) = caller(2);
         $message =
           "auditLogger internal error: no message provided at $file line $line";
+        $fields{logLevel} = 'error';
     }
-    $self->{userLogger}->info($message);
+    my $sub = $fields{logLevel} || 'info';
+    unless ( $sub =~ /^(?:debug|info|notice|warn|error)$/ ) {
+        $message = "[malformed logLevel $sub] $message";
+        $sub     = 'error';
+    }
+    $self->{userLogger}->$sub($message);
 }
 1;
new file mode 100644
--- /dev/null
+++ b/usr/share/perl5/Lemonldap/NG/Common/AuditLogger/UserLoggerJSON.pm
@@ -0,0 +1,41 @@
+package Lemonldap::NG::Common::AuditLogger::UserLoggerJSON;
+
+use strict;
+use JSON;
+use Scalar::Util qw(weaken);
+
+our $VERSION = '2.21.0';
+
+sub new {
+    my ( $class, $psgi_or_handler ) = @_;
+    my $self = bless {}, $class;
+
+    $self->{userLogger} = $psgi_or_handler->userLogger
+      or die 'Missing userLogger';
+    weaken $self->{userLogger};
+    my $json = JSON->new->canonical;
+    $self->{encode} = sub { $json->encode(@_) };
+    return $self;
+}
+
+sub log {
+    my ( $self, $req, %fields ) = @_;
+
+    my $message = $fields{message};
+    if ( !$message ) {
+        my ( $module, $file, $line ) = caller(2);
+        $message =
+          "auditLogger internal error: no message provided at $file line $line";
+        $fields{logLevel} = 'error';
+    }
+    my $sub = $fields{logLevel} || 'info';
+    unless ( $sub =~ /^(?:debug|info|notice|warn|error)$/ ) {
+        $message = "[malformed logLevel $sub] $message";
+        $sub     = 'error';
+    }
+    foreach ( keys %fields ) {
+        delete $fields{$_} if ref( $fields{$_} );
+    }
+    $self->{userLogger}->$sub( $self->{encode}->( \%fields ) );
+}
+1;
