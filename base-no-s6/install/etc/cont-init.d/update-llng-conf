#!/command/with-contenv sh

INI=/etc/lemonldap-ng/lemonldap-ng.ini

# Use overlay for config
if grep -E '^type *= *Overlay$' $INI 2>&1; then
    echo "Overlay is already in use, skipping"
else
    perl -i -pe 's/^type\s*=\s*(\w+)/type = Overlay\noverlayRealtype = $1\noverlayDirectory = \/over\n/' $INI
fi

# Install Lemon commands in usr/bin
for i in `find /usr/share/lemonldap-ng/bin -type f -perm -g=x`; do
    NAME=`basename $i`
    ln -s $i /usr/bin/$NAME
done

# Fix logLevel
echo "Set logLevel to $LOGLEVEL"
perl -i -pe 's/^logLevel\s*=.*$/logLevel=$ENV{LOGLEVEL}/' $INI

# Fix logger
LOKI=""
if test "$LOGGER" = "stderr"; then
    echo "Set logger to Lemonldap::NG::Common::Logger::Std"
    perl -i -ne 'print unless /^logger\s*=/;print "logger = Lemonldap::NG::Common::Logger::Std\n" if/^\[\s*all\s*\]/;' $INI
elif test "$LOGGER" = "loki"; then
    echo "Set logger to Lemonldap::NG::Common::Logger::Loki"
    perl -i -ne 'print unless /^logger\s*=/;print "logger = Lemonldap::NG::Common::Logger::Loki\nlokiUrl = '"$LOKIURL"'\n" if/^\[\s*all\s*\]/;' $INI
    LOKI=1
fi

if test "$USERLOGGER" = "stderr"; then
    echo "Set userLogger to Lemonldap::NG::Common::Logger::Std"
    perl -i -ne 'print unless /^userLogger\s*=/;print "userLogger = Lemonldap::NG::Common::Logger::Std\n" if/^\[\s*all\s*\]/;' $INI
elif test "$USERLOGGER" = "loki"; then
    echo "Set userLogger to Lemonldap::NG::Common::Logger::Loki"
    perl -i -ne 'print unless /^(?:userLogger|lokiUrl)\s*=/;print "userLogger = Lemonldap::NG::Common::Logger::Loki\nlokiUrl = '"$LOKIURL"'\n" if/^\[\s*all\s*\]/;' $INI
    LOKI=1
fi

if test "$LOKI" != ""; then
    mv /etc/services.disabled/loki-buffer /etc/services.d/
fi

if test "$LOKI" != "" -a "$AUDITLOGGER" = ""; then
    AUDITLOGGER='Lemonldap::NG::Common::AuditLogger::UserLoggerJSON'

    if test "$LOKITENANT" != ""; then
        echo "Configure Loki tenant"
        perl -i -ne 'print unless /^(?:lokiTenant)\s*=/;print "lokiTenant = '"$LOKITENANT"'\n" if/^\[\s*all\s*\]/;' $INI
    fi

    if test "$LOKIAUTHORIZATION" != ""; then
        echo "Configure Loki tenant"
        perl -i -ne 'print unless /^(?:lokiAuthorization)\s*=/;print "lokiAuthorization = '"$LOKIAUTHORIZATION"'\n" if/^\[\s*all\s*\]/;' $INI
    fi
fi

if test "$AUDITLOGGER" != ""; then
    echo "Set auditLogger to $AUDITLOGGER"
    perl -i -ne 'print unless /^auditLogger\s*=/;print "auditLogger = '"$AUDITLOGGER"'\n" if/^\[\s*all\s*\]/;' $INI
fi

if test "$DEFAULT_WEBSITE" = "yes"; then
    echo "Drop Nginx default website"
    rm -f /etc/nginx/sites-enabled/default
fi

# OPTIONAL DATABASE FOR CONFIGURATION
#
# 1 - Check for PostgreSQL server
if [ "$PG_SERVER" != "" ]; then
   PG_DATABASE=${PG_DATABASE:-lemonldap-ng}
   DEFAULT_DBI_CHAIN="DBI:Pg:database=$PG_DATABASE;host=$PG_SERVER"
   if [ "$PG_OPTIONS" != "" ]; then
      DEFAULT_DBI_CHAIN="$DEFAULT_DBI_CHAIN;$PG_OPTIONS"
   fi
   DBI_CHAIN=${DBI_CHAIN:-$DEFAULT_DBI_CHAIN}
   export DBI_CHAIN
fi

if test "$DBI_CHAIN" != ""; then
   echo "Configuring lemonldap-ng.ini to use database for configuration"
   # 2 - Save current INI file
   cp $INI /etc/lemonldap-ng/lemonldap-ng-file.ini
   # 3 - Build DBI variables if not given
   DBI_USER=${DBI_USER:-$PG_USER}
   DBI_PASSWORD=${DBI_PASSWORD:-$PG_PASSWORD}
   DBI_TABLE=${DBI_TABLE:-$PG_TABLE}
   export DBI_USER
   export DBI_PASSWORD
   export DBI_TABLE
   # 4 - Build new INI file
   set -e
   perl -i -pe 's/^\s*overlayRealtype\s*=\s*File\s*$/overlayRealtype=CDBI\n/;
   s/^\s*dirName\s*=.*$/dbiChain=$ENV{DBI_CHAIN}\ndbiUser=$ENV{DBI_USER}\ndbiPassword=$ENV{DBI_PASSWORD}\ndbiTable=$ENV{DBI_TABLE}\n/;
   ' $INI

   # 5 - Check if there is already a configuration stored in SQL database
   CONF=`perl -MDBI -MDBD::Pg -e '$dbh=DBI->connect("'"$DBI_CHAIN"'","'"$DBI_USER"'","'"$DBI_PASSWORD"'",{ RaiseError => 1});$r=$dbh->selectall_arrayref("SELECT * FROM '"$DBI_TABLE"'");print scalar @$r'`
   # 6 - If no configuration in current server, let's convert current "File" configuration into database
   if test "$CONF" = "0"; then
     /usr/share/lemonldap-ng/bin/convertConfig --new=$INI --current=/etc/lemonldap-ng/lemonldap-ng-file.ini
     /usr/share/docker-llng/updateConf set persistentStorage "Apache::Session::Browseable::PgJSON"
     /usr/share/docker-llng/updateConf set persistentStorageOptions '{"TableName":"'"$PG_PERSISTENT_SESSIONS_TABLE"'","DataSource":"'"$DBI_CHAIN"'","UserName":"'"$DBI_USER"'","Password":"'"$DBI_PASSWORD"'","Commit":1}'
     if test "$REDIS_SERVER" = ""; then
       /usr/share/docker-llng/updateConf set globalStorage "Apache::Session::Browseable::PgJSON"
       /usr/share/docker-llng/updateConf set globalStorageOptions '{"TableName":"'"$PG_SESSIONS_TABLE"'","DataSource":"'"$DBI_CHAIN"'","UserName":"'"$DBI_USER"'","Password":"'"$DBI_PASSWORD"'","Commit":1}'
       /usr/share/docker-llng/updateConf set samlStorage "Apache::Session::Browseable::PgJSON"
       /usr/share/docker-llng/updateConf set samlStorageOptions '{"TableName":"'"$PG_SAML_TABLE"'","DataSource":"'"$DBI_CHAIN"'","UserName":"'"$DBI_USER"'","Password":"'"$DBI_PASSWORD"'","Commit":1}'
       /usr/share/docker-llng/updateConf set oidcStorage "Apache::Session::Browseable::PgJSON"
       /usr/share/docker-llng/updateConf set oidcStorageOptions '{"TableName":"'"$PG_OIDC_TABLE"'","DataSource":"'"$DBI_CHAIN"'","UserName":"'"$DBI_USER"'","Password":"'"$DBI_PASSWORD"'","Commit":1}'
       /usr/share/docker-llng/updateConf set casStorage "Apache::Session::Browseable::PgJSON"
       /usr/share/docker-llng/updateConf set casStorageOptions '{"TableName":"'"$PG_CAS_TABLE"'","DataSource":"'"$DBI_CHAIN"'","UserName":"'"$DBI_USER"'","Password":"'"$DBI_PASSWORD"'","Commit":1}'
     fi
     /usr/share/docker-llng/updateConf set messageBroker ::Pg
     /usr/share/docker-llng/updateConf set messageBrokerOptions '{"dbiChain":"'"$DBI_CHAIN"'","dbiUser":"'"$DBI_USER"'","dbiPassword":"'"$DBI_PASSWORD"'"}'
   else
     echo "Previous configuration found, skipping configuration conversion"
   fi
elif [ "$LDAP_URL" != "" ]; then
   echo "Configuring lemonldap-ng.ini to use database for configuration"
   # 2 - Save current INI file
   cp $INI /etc/lemonldap-ng/lemonldap-ng-file.ini
   perl -i -pe 's/^\s*overlayRealtype\s*=\s*File\s*$/overlayRealtype=LDAP\n/;
     s/^\s*dirName\s*=.*$/ldapServer=$ENV{LDAP_URL}\nldapConfBase=$ENV{LDAP_CONF_BASE}\nldapBindDN=$ENV{LDAP_CONF_DN}\nldapBindPassword=$ENV{LDAP_CONF_PASSWORD}\n/;
   ' $INI
   if [ "$LDAP_CONF_DN" != "" ]; then
     CONF=`perl -MNet::LDAP -e '$ldap=Net::LDAP->new(["'"$LDAP_URL"'"])or die"No LDAP";$b=$ldap->bind("'"$LDAP_CONF_DN"'",password=>"'"$LDAP_CONF_PASSWORD"'");die if $b->code;$s=$ldap->search(base=>"'"$LDAP_CONF_BASE"'",filter=>"(objectClass=applicationProcess,scope=>"one")");print $s->code ? 0 : "MANY"'`
   else
     CONF=`perl -MNet::LDAP -e '$ldap=Net::LDAP->new(["'"$LDAP_URL"'"])or die"No LDAP";$s=$ldap->search(base=>"'"$LDAP_CONF_BASE"'",filter=>"(objectClass=applicationProcess,scope=>"one")");print $s->code ? 0 : "MANY"'`
   fi
   if test "$CONF" = "0"; then
     /usr/share/lemonldap-ng/bin/convertConfig --new=$INI --current=/etc/lemonldap-ng/lemonldap-ng-file.ini
   else
     echo "Previous configuration found, skipping configuration conversion"
   fi
fi

PORTALURL=`portalUrl "$PORTAL"`

/usr/share/docker-llng/updateConf "setDomain" "$SSODOMAIN"
/usr/share/docker-llng/updateConf "set" portal "$PORTALURL"

# Fix logout redirection
if test "$FIXED_LOGOUT_REDIRECTION" != ""; then
    echo "Configure LLNG to redirect all logouts on $FIXED_LOGOUT_REDIRECTION"
    /usr/share/docker-llng/updateConf set fixedLogoutRedirection "$FIXED_LOGOUT_REDIRECTION"
fi

if test "$CROWDSEC_SERVER" != ""; then
    echo "Configure LLNG to use $CROWDSEC_SERVER as Crowdsec server"
    /usr/share/docker-llng/updateConf set crowdsec 1
    /usr/share/docker-llng/updateConf set crowdsecUrl "$CROWDSEC_SERVER"
    if test "$CROWDSEC_POLICY" != ""; then
        POLICY="$CROWDSEC_POLICY"
    else
        POLICY=reject
    fi
    /usr/share/docker-llng/updateConf set crowdsecAction "$POLICY"
    /usr/share/docker-llng/updateConf set crowdsecKey "$CROWDSEC_KEY"
    if test "$CROWDSEC_IGNORE_FAILURES" != "1"; then
        CROWDSEC_IGNORE_FAILURES=0
    fi
    /usr/share/docker-llng/updateConf set crowdsecIgnoreFailures "$CROWDSEC_IGNORE_FAILURES"
fi

# If Redis server is given, let's use it for sessions
if test "$REDIS_SERVER" != ""; then
    echo "Change configuration to use Redis for sessions"
    TMP=`/usr/share/docker-llng/updateConf get globalStorageOptions Index`
    REDIS_INDEXES=${REDIS_INDEXES:-$TMP}
    REDIS_INDEXES=${REDIS_INDEXES:-_whatToTrace _session_kind _utime ipAddr _httpSessionType user mail _session_uid _saml_id ProxyID _nameID _assert_id _art_id}
    /usr/share/docker-llng/updateConf set globalStorage 'Apache::Session::Browseable::Redis'
    /usr/share/docker-llng/updateConf set globalStorageOptions server "$REDIS_SERVER"
    /usr/share/docker-llng/updateConf set globalStorageOptions Index "$REDIS_INDEXES"
    /usr/share/docker-llng/updateConf set forceGlobalStorageIssuerOTT 1
    /usr/share/docker-llng/updateConf set tokenUseGlobalStorage 1
    /usr/share/docker-llng/updateConf set forceGlobalStorageUpgradeOTT 1
fi

# Drop any cache
rm -rf /var/lib/lemonldap-ng/cache/*/*

KEY=`/usr/share/docker-llng/updateConf get key`

if test "$KEY" = "" -o "$FORCE_KEY_REGENERATION" = "yes"; then
    echo "Update configuration key"
    /usr/share/docker-llng/updateConf set key `cat /proc/sys/kernel/random/uuid | sed 's/[-]//g'` 2>&1 | perl -pe 's/\w{32}/<hidden for security>/'
fi

KEYS=`(env | grep OVERRIDE || true) | sed -e 's/=.*$//'`
for key in `(env | grep OVERRIDE || true) | sed -e 's/=.*$//'`; do
    KEYNAME=${key#OVERRIDE_}
    VAL=$(eval "echo \$$key")
    echo "Set $KEYNAME to $VAL"
    /usr/share/docker-llng/updateConf set `echo $KEYNAME|perl -pe 's/_/\n/g'` "$VAL"
done

if test "$LANGUAGES" != ''; then
	perl -i -pe "s/^(languages\s*=\s*).*\$/\$1$LANGUAGES/" /etc/lemonldap-ng/lemonldap-ng.ini
fi
